import os
import telebot
import sqlite3
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not set in environment variables!")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# –ü—Ä–æ—Å—Ç–æ–π Health Server –¥–ª—è Render
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK - Paint Bot is Running")
    
    def log_message(self, format, *args):
        pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏

def start_health_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"‚úÖ Health server started on port {port}")
    server.serve_forever()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('paints.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS paints (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            quantity REAL NOT NULL,
            color TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("‚úÖ Database initialized")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üé® –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–∞—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω!\n\n–ö–æ–º–∞–Ω–¥—ã:\n/add –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [—Ü–≤–µ—Ç]\n/list - —Å–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫")

@bot.message_handler(commands=['add'])
def add_paint(message):
    try:
        parts = message.text.split()
        if len(parts) >= 3:
            name = parts[1]
            quantity = float(parts[2])
            color = parts[3] if len(parts) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            conn = sqlite3.connect('paints.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO paints (name, quantity, color) 
                VALUES (?, ?, ?)
            ''', (name, quantity, color))
            conn.commit()
            conn.close()
            
            bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {name} - {quantity}–∫–≥")
            logger.info(f"‚ûï Added paint: {name} - {quantity}kg")
        else:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [—Ü–≤–µ—Ç]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list'])
def list_paints(message):
    try:
        conn = sqlite3.connect('paints.db')
        cursor = conn.cursor()
        cursor.execute('SELECT name, quantity, color FROM paints ORDER BY name')
        paints = cursor.fetchall()
        conn.close()
        
        if paints:
            response = "üìä –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫:\n\n"
            for name, quantity, color in paints:
                response += f"‚Ä¢ {name}: {quantity}–∫–≥ ({color})\n"
        else:
            response = "üì≠ –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫ –ø—É—Å—Ç"
        
        bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    logger.info("üöÄ Starting Paint Stock Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –û—á–∏—Å—Ç–∫–∞ webhook (–≤–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    try:
        bot.remove_webhook()
        logger.info("‚úÖ Webhook cleared")
    except Exception as e:
        logger.info(f"‚ÑπÔ∏è Webhook clear: {e}")
    
    # –ó–∞–ø—É—Å–∫ health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    logger.info("‚úÖ Health server thread started")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ Starting Telegram bot polling...")
    bot.infinity_polling()
