import telebot
import sqlite3
import os
import logging
from datetime import datetime
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

bot = telebot.TeleBot(TOKEN)
logger.info("üé® –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–∞—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('paint_db.sqlite')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS paints (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                color_code TEXT NOT NULL,
                effect TEXT NOT NULL,
                quantity REAL NOT NULL,
                unit TEXT DEFAULT 'kg',
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                paint_id INTEGER,
                type TEXT NOT NULL,
                amount REAL NOT NULL,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (paint_id) REFERENCES paints (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
EFFECTS = {
    'matt': 'üü¢ –ú–∞—Ç–æ–≤—ã–π',
    'gloss': 'üîµ –ì–ª—è–Ω–µ—Ü', 
    'moire': 'üü£ –ú—É–∞—Ä',
    'texture': 'üü† –®–∞–≥—Ä–µ–Ω—å',
    'varnish': '‚ö™ –õ–∞–∫'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_states = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton('üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É'),
        KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫'),
        KeyboardButton('üì§ –°–ø–∏—Å–∞—Ç—å –∫—Ä–∞—Å–∫—É'),
        KeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É'),
        KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    ]
    keyboard.add(*buttons)
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
def create_effect_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for effect_key, effect_name in EFFECTS.items():
        buttons.append(InlineKeyboardButton(effect_name, callback_data=f"effect_{effect_key}"))
    keyboard.add(*buttons)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PaintStock Bot!</b>

–ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π —É—á–µ—Ç –ø–æ—Ä–æ—à–∫–æ–≤–æ–π –∫—Ä–∞—Å–∫–∏ –∏ –ª–∞–∫–æ–≤.

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –£—á–µ—Ç –ø–æ –∫–æ–¥–∞–º (RAL, —Ü–∏—Ñ—Ä–æ–≤—ã–µ, –±—É–∫–≤–µ–Ω–Ω—ã–µ)
‚Ä¢ 5 –≤–∏–¥–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
‚Ä¢ –£—á–µ—Ç –≤–µ—Å–∞ –≤ –∫–≥
‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    bot.send_message(
        message.chat.id, 
        welcome_text,
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_main_menu(message):
    user_id = message.chat.id
    text = message.text
    
    if text == 'üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É':
        add_paint_step1(message)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫':
        list_paints(message)
    elif text == 'üì§ –°–ø–∏—Å–∞—Ç—å –∫—Ä–∞—Å–∫—É':
        use_paint(message)
    elif text == 'üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É':
        search_paint(message)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_stats(message)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        show_help(message)
    else:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üì±", 
                        reply_markup=create_main_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Å–∫–∏ - –®–∞–≥ 1
def add_paint_step1(message):
    user_id = message.chat.id
    user_states[user_id] = {'step': 'waiting_code'}
    
    msg = bot.send_message(
        user_id, 
        "üé® <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∫–∏:</b>\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 3005\n‚Ä¢ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π\n‚Ä¢ —á–µ—Ä–Ω—ã–π –º–∞—Ç–æ–≤—ã–π",
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, add_paint_step2)

# –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
def add_paint_step2(message):
    try:
        user_id = message.chat.id
        color_code = message.text.strip()
        
        if not color_code:
            bot.send_message(user_id, "‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=create_main_keyboard())
            if user_id in user_states:
                del user_states[user_id]
            return
        
        user_states[user_id] = {
            'step': 'waiting_effect',
            'color_code': color_code
        }
        
        keyboard = create_effect_keyboard()
        bot.send_message(user_id, f"üé® –ö–æ–¥: <b>{color_code}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç:", 
                        parse_mode='HTML', reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_paint_step2: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=create_main_keyboard())
        if user_id in user_states:
            del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('effect_'))
def handle_effect_selection(call):
    try:
        user_id = call.message.chat.id
        
        if user_id not in user_states or user_states[user_id]['step'] != 'waiting_effect':
            bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            return
        
        effect_key = call.data.replace('effect_', '')
        effect_name = EFFECTS.get(effect_key)
        
        if not effect_name:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç")
            return
        
        user_states[user_id] = {
            'step': 'waiting_weight',
            'color_code': user_states[user_id]['color_code'],
            'effect': effect_name.replace('üü¢ ', '').replace('üîµ ', '').replace('üü£ ', '').replace('üü† ', '').replace('‚ö™ ', '')
        }
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=f"üé® –ö–æ–¥: <b>{user_states[user_id]['color_code']}</b>\n‚úÖ –≠—Ñ—Ñ–µ–∫—Ç: {effect_name}",
            parse_mode='HTML'
        )
        
        msg = bot.send_message(user_id, "‚öñÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥:</b>\n\n–ü—Ä–∏–º–µ—Ä: 5.0, 10.5, 25", 
                              parse_mode='HTML')
        bot.register_next_step_handler(msg, add_paint_step3)
        
        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω: {effect_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_effect_selection: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

# –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞
def add_paint_step3(message):
    user_id = message.chat.id
    try:
        if user_id not in user_states or user_states[user_id]['step'] != 'waiting_weight':
            bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", reply_markup=create_main_keyboard())
            return
        
        weight = float(message.text.strip())
        color_code = user_states[user_id]['color_code']
        effect = user_states[user_id]['effect']
        
        if weight <= 0:
            bot.send_message(user_id, "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", reply_markup=create_main_keyboard())
            del user_states[user_id]
            return
        
        conn = sqlite3.connect('paint_db.sqlite')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cursor.execute('SELECT id, quantity FROM paints WHERE color_code = ? AND effect = ?', (color_code, effect))
        existing = cursor.fetchone()
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
            cursor.execute('UPDATE paints SET quantity = quantity + ? WHERE id = ?', (weight, existing[0]))
            paint_id = existing[0]
            new_quantity = existing[1] + weight
            action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            cursor.execute('INSERT INTO paints (color_code, effect, quantity) VALUES (?, ?, ?)', 
                         (color_code, effect, weight))
            paint_id = cursor.lastrowid
            new_quantity = weight
            action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        cursor.execute('INSERT INTO transactions (paint_id, type, amount) VALUES (?, ?, ?)',
                     (paint_id, 'add', weight))
        
        conn.commit()
        conn.close()
        
        bot.send_message(
            user_id,
            f"‚úÖ –ö—Ä–∞—Å–∫–∞ <b>{action_text}!</b>\n\n"
            f"üé® –ö–æ–¥: <b>{color_code}</b>\n"
            f"‚ú® –≠—Ñ—Ñ–µ–∫—Ç: <b>{effect}</b>\n"
            f"üì¶ –í–µ—Å: <b>{weight} –∫–≥</b>\n"
            f"üìä –¢–µ–ø–µ—Ä—å: <b>{new_quantity} –∫–≥</b>",
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—Ä–∞—Å–∫–∞: {color_code} ({effect}) - {weight}–∫–≥")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞!", reply_markup=create_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_paint_step3: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", reply_markup=create_main_keyboard())
    finally:
        if user_id in user_states:
            del user_states[user_id]

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∞—Å–æ–∫
def list_paints(message):
    try:
        conn = sqlite3.connect('paint_db.sqlite')
        cursor = conn.cursor()
        cursor.execute('SELECT color_code, effect, quantity FROM paints ORDER BY color_code, effect')
        paints = cursor.fetchall()
        conn.close()
        
        if not paints:
            bot.send_message(message.chat.id, "üì≠ <b>–°–∫–ª–∞–¥ –ø—É—Å—Ç</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫—Ä–∞—Å–∫—É!",
                           parse_mode='HTML', reply_markup=create_main_keyboard())
            return
        
        response = "üé® <b>–°–∫–ª–∞–¥ –ø–æ—Ä–æ—à–∫–æ–≤–æ–π –∫—Ä–∞—Å–∫–∏:</b>\n\n"
        current_code = None
        
        for color_code, effect, quantity in paints:
            if color_code != current_code:
                current_code = color_code
                response += f"\nüî∏ <b>{color_code}:</b>\n"
            response += f"   ‚Ä¢ {effect}: {quantity} –∫–≥\n"
        
        bot.send_message(message.chat.id, response, parse_mode='HTML', reply_markup=create_main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_paints: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", reply_markup=create_main_keyboard())

# –ü–æ–∏—Å–∫ –∫—Ä–∞—Å–∫–∏
def search_paint(message):
    msg = bot.send_message(message.chat.id, "üîç <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, process_search)

def process_search(message):
    try:
        color_code = message.text.strip()
        conn = sqlite3.connect('paint_db.sqlite')
        cursor = conn.cursor()
        cursor.execute('SELECT effect, quantity FROM paints WHERE color_code = ? ORDER BY effect', (color_code,))
        paints = cursor.fetchall()
        conn.close()
        
        if not paints:
            bot.send_message(message.chat.id, f"‚ùå –ö–æ–¥ '<b>{color_code}</b>' –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                           parse_mode='HTML', reply_markup=create_main_keyboard())
            return
        
        response = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–æ–¥—É '{color_code}':</b>\n\n"
        total = 0
        for effect, quantity in paints:
            response += f"‚Ä¢ {effect}: {quantity} –∫–≥\n"
            total += quantity
        
        response += f"\nüì¶ <b>–ò—Ç–æ–≥–æ: {total} –∫–≥</b>"
        bot.send_message(message.chat.id, response, parse_mode='HTML', reply_markup=create_main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_search: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ", reply_markup=create_main_keyboard())

# –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∞—Å–∫–∏
def use_paint(message):
    msg = bot.send_message(
        message.chat.id, 
        "üì§ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:</b>\n\n–§–æ—Ä–º–∞—Ç: <code>–ö–û–î —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>3005 –≥–ª—è–Ω–µ—Ü 1.5</code>\n<code>–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ª–∞–∫ 2.0</code>",
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_use_paint)

def process_use_paint(message):
    try:
        data = message.text.split()
        if len(data) < 3:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=create_main_keyboard())
            return
            
        possible_effects = ['–º–∞—Ç–æ–≤—ã–π', '–≥–ª—è–Ω–µ—Ü', '–º—É–∞—Ä', '—à–∞–≥—Ä–µ–Ω—å', '–ª–∞–∫']
        effect_index = None
        
        for i, word in enumerate(data):
            if word in possible_effects:
                effect_index = i
                break
        
        if effect_index is None:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç", reply_markup=create_main_keyboard())
            return
        
        color_code = ' '.join(data[:effect_index])
        effect = data[effect_index]
        amount = float(data[-1])
        
        conn = sqlite3.connect('paint_db.sqlite')
        cursor = conn.cursor()
        cursor.execute('SELECT id, quantity FROM paints WHERE color_code = ? AND effect = ?', (color_code, effect))
        paint = cursor.fetchone()
        
        if not paint:
            bot.send_message(message.chat.id, f"‚ùå –ö—Ä–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=create_main_keyboard())
            return
        
        paint_id, current_quantity = paint
        
        if current_quantity < amount:
            bot.send_message(message.chat.id, 
                           f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∞—Å–∫–∏!\n\n–î–æ—Å—Ç—É–ø–Ω–æ: <b>{current_quantity} –∫–≥</b>",
                           parse_mode='HTML', reply_markup=create_main_keyboard())
            return
        
        new_quantity = current_quantity - amount
        cursor.execute('UPDATE paints SET quantity = ? WHERE id = ?', (new_quantity, paint_id))
        cursor.execute('INSERT INTO transactions (paint_id, type, amount) VALUES (?, ?, ?)', 
                     (paint_id, 'use', amount))
        conn.commit()
        conn.close()
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–°–ø–∏—Å–∞–Ω–æ {amount} –∫–≥</b>\n\n"
            f"üé® –ö–æ–¥: <b>{color_code}</b>\n"
            f"‚ú® –≠—Ñ—Ñ–µ–∫—Ç: <b>{effect}</b>\n"
            f"üìä –û—Å—Ç–∞—Ç–æ–∫: <b>{new_quantity} –∫–≥</b>",
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        
        logger.info(f"‚ûñ –°–ø–∏—Å–∞–Ω–∞ –∫—Ä–∞—Å–∫–∞: {color_code} ({effect}) - {amount}–∫–≥")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_use_paint: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏", reply_markup=create_main_keyboard())

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
def show_stats(message):
    try:
        conn = sqlite3.connect('paint_db.sqlite')
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*), SUM(quantity) FROM paints')
        total_paints, total_quantity = cursor.fetchone()
        
        cursor.execute('''
            SELECT p.color_code, p.effect, t.amount, t.date 
            FROM transactions t 
            JOIN paints p ON t.paint_id = p.id 
            ORDER BY t.date DESC 
            LIMIT 5
        ''')
        recent_transactions = cursor.fetchall()
        conn.close()
        
        response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞:</b>\n\n"
        response += f"‚Ä¢ üé® –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: <b>{total_paints}</b>\n"
        response += f"‚Ä¢ ‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: <b>{total_quantity or 0} –∫–≥</b>\n\n"
        
        if recent_transactions:
            response += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            for color_code, effect, amount, date in recent_transactions:
                response += f"‚Ä¢ {color_code} ({effect}): {amount} –∫–≥\n"
        else:
            response += "üìù –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        
        bot.send_message(message.chat.id, response, parse_mode='HTML', reply_markup=create_main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=create_main_keyboard())

# –ü–æ–º–æ—â—å
def show_help(message):
    help_text = """
üé® <b>PaintStock Bot - –ø–æ–º–æ—â—å</b>

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –£—á–µ—Ç –∫—Ä–∞—Å–∫–∏ –ø–æ –ª—é–±—ã–º –∫–æ–¥–∞–º
‚Ä¢ 5 –≤–∏–¥–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
‚Ä¢ –£—á–µ—Ç –≤–µ—Å–∞ –≤ –∫–≥
‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</b>
‚Ä¢ üü¢ –ú–∞—Ç–æ–≤—ã–π
‚Ä¢ üîµ –ì–ª—è–Ω–µ—Ü  
‚Ä¢ üü£ –ú—É–∞—Ä
‚Ä¢ üü† –®–∞–≥—Ä–µ–Ω—å
‚Ä¢ ‚ö™ –õ–∞–∫

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
1. üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É - –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –≤—ã–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç, –≤–≤–µ—Å—Ç–∏ –≤–µ—Å
2. üìã –°–ø–∏—Å–æ–∫ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–∫–ª–∞–¥
3. üì§ –°–ø–∏—Å–∞—Ç—å - —É–∫–∞–∑–∞—Ç—å –∫–æ–¥, —ç—Ñ—Ñ–µ–∫—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
4. üîç –ü–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –∫—Ä–∞—Å–∫—É –ø–æ –∫–æ–¥—É
5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

<b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤:</b>
‚Ä¢ 3005 (RAL)
‚Ä¢ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
‚Ä¢ —á–µ—Ä–Ω—ã–π –º–∞—Ç–æ–≤—ã–π
‚Ä¢ –º–µ—Ç–∞–ª–ª–∏–∫ —Å–µ—Ä–µ–±—Ä–æ
    """
    bot.send_message(message.chat.id, help_text, parse_mode='HTML', reply_markup=create_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    while True:
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            bot.polling(none_stop=True, interval=1, timeout=30)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
# ... –≤–µ—Å—å –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±–æ—Ç–∞ ...

# === –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ö–û–î –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ===

import os
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write("üé® Paint Stock Bot is running!".encode('utf-8'))
    
    def log_message(self, format, *args):
        return  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏

def start_health_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f"‚úÖ Health server started on port {port}")
    server.serve_forever()

# –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    print("‚úÖ Bot starting with health server...")
    bot.infinity_polling()
