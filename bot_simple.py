import os
import telebot
import sqlite3
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not set in environment variables!")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# Health Server –¥–ª—è Render
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK - Paint Bot is Running")
    
    def log_message(self, format, *args):
        pass

def start_health_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"‚úÖ Health server started on port {port}")
    server.serve_forever()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('paints.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS paints (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            quantity REAL NOT NULL,
            color TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("‚úÖ Database initialized")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_add = types.KeyboardButton('üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É')
    btn_list = types.KeyboardButton('üìä –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫')
    btn_help = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    btn_stats = types.KeyboardButton('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    keyboard.add(btn_add, btn_list, btn_help, btn_stats)
    return keyboard

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    keyboard = create_main_keyboard()
    bot.send_message(
        message.chat.id,
        "üé® **–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–∞—Å–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É\n"
        "‚Ä¢ /list - —Å–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫\n"
        "‚Ä¢ /help - –ø–æ–º–æ—â—å\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def send_help(message):
    help_text = """
üé® **–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–∞—Å–∫–∏ - –ü–æ–º–æ—â—å**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /add –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [—Ü–≤–µ—Ç] - –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É
‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—Ä–∞—Å–∫–∏
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
/add –ë–µ–ª–∞—è_—ç–º–∞–ª—å 5.0 –ë–µ–ª—ã–π
/add –ö—Ä–∞—Å–Ω–∞—è_–∞–∫—Ä–∏–ª–æ–≤–∞—è 3.5 –ö—Ä–∞—Å–Ω—ã–π

**–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá**
"""
    bot.send_message(message.chat.id, help_text, reply_markup=create_main_keyboard())

@bot.message_handler(commands=['add'])
@bot.message_handler(func=lambda message: message.text == 'üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É')
def add_paint_command(message):
    msg = bot.send_message(
        message.chat.id,
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Å–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ [–¶–≤–µ—Ç]`\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "`–ë–µ–ª–∞—è_—ç–º–∞–ª—å 5.0 –ë–µ–ª—ã–π`\n"
        "`–ö—Ä–∞—Å–Ω–∞—è_–∞–∫—Ä–∏–ª–æ–≤–∞—è 3.5`",
        parse_mode='Markdown',
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_add_paint)

def process_add_paint(message):
    try:
        parts = message.text.split()
        if len(parts) >= 2:
            name = parts[0]
            quantity = float(parts[1])
            color = parts[2] if len(parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            conn = sqlite3.connect('paints.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∫–∞
            cursor.execute('SELECT name FROM paints WHERE name = ?', (name,))
            existing = cursor.fetchone()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                cursor.execute('UPDATE paints SET quantity = quantity + ? WHERE name = ?', (quantity, name))
                action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute('INSERT INTO paints (name, quantity, color) VALUES (?, ?, ?)', (name, quantity, color))
                action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            conn.commit()
            conn.close()
            
            response = f"‚úÖ –ö—Ä–∞—Å–∫–∞ **{action}**!\n\n" \
                      f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n" \
                      f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity}–∫–≥\n" \
                      f"**–¶–≤–µ—Ç:** {color}"
            
            bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=create_main_keyboard())
            logger.info(f"‚ûï Paint {action}: {name} - {quantity}kg")
            
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ [–¶–≤–µ—Ç]`\n"
                "**–ü—Ä–∏–º–µ—Ä:** `–ë–µ–ª–∞—è_—ç–º–∞–ª—å 5.0 –ë–µ–ª—ã–π`",
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå **–û—à–∏–±–∫–∞!** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "**–ü—Ä–∏–º–µ—Ä:** `–ë–µ–ª–∞—è_—ç–º–∞–ª—å 5.0`",
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}",
            reply_markup=create_main_keyboard()
        )

@bot.message_handler(commands=['list'])
@bot.message_handler(func=lambda message: message.text == 'üìä –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫')
def list_paints(message):
    try:
        conn = sqlite3.connect('paints.db')
        cursor = conn.cursor()
        cursor.execute('SELECT name, quantity, color FROM paints ORDER BY name')
        paints = cursor.fetchall()
        conn.close()
        
        if paints:
            total_quantity = sum(paint[1] for paint in paints)
            response = f"üìä **–°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫**\n\n"
            
            for name, quantity, color in paints:
                response += f"‚Ä¢ **{name}**: {quantity}–∫–≥ ({color})\n"
            
            response += f"\n**–í—Å–µ–≥–æ:** {len(paints)} –ø–æ–∑–∏—Ü–∏–π, {total_quantity}–∫–≥"
        else:
            response = "üì≠ **–°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫ –ø—É—Å—Ç**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É'"
        
        bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=create_main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['stats'])
@bot.message_handler(func=lambda message: message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_stats(message):
    try:
        conn = sqlite3.connect('paints.db')
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*), SUM(quantity) FROM paints')
        result = cursor.fetchone()
        conn.close()
        
        count = result[0] or 0
        total = result[1] or 0
        
        stats_text = f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞**\n\n" \
                    f"‚Ä¢ **–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:** {count}\n" \
                    f"‚Ä¢ **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {total}–∫–≥\n" \
                    f"‚Ä¢ **–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é:** {total/count:.1f}–∫–≥" if count > 0 else "0–∫–≥"
        
        bot.send_message(message.chat.id, stats_text, parse_mode='Markdown', reply_markup=create_main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", reply_markup=create_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text not in ['üé® –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∫—É', 'üìä –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–æ–∫', '‚ùì –ü–æ–º–æ—â—å', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
        bot.send_message(
            message.chat.id,
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=create_main_keyboard()
        )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    logger.info("üöÄ Starting Paint Stock Bot with buttons...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –û—á–∏—Å—Ç–∫–∞ webhook
    try:
        bot.remove_webhook()
        logger.info("‚úÖ Webhook cleared")
    except Exception as e:
        logger.info(f"‚ÑπÔ∏è Webhook clear: {e}")
    
    # –ó–∞–ø—É—Å–∫ health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    logger.info("‚úÖ Health server thread started")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ Starting Telegram bot polling...")
    bot.infinity_polling()
